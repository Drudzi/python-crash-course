SETTING UP A PROJECT:
    
    Creating the virtual environment:

        A virtual environment (venv) is a place on your system where you can install packages
        and isolate them from all other Python packages.
        Separating one project's libraries from other projects is beneficial and
        will be necessary when we deploy LL to a server.

        We set up a new directory (learning_log) for our project and use the venv module to setup a virtual env:
        In command promt, in the right directory, we enter the following to create a venv called ll_venv:
            python -m venv ll_venv

        We activate the env:
            ll_env\Scripts\activate

        Deactivate using 'deactivate' in cmd.

    Installing Django:

        pip install django
        Keep in mind that Django will be available only when the ll_env is active.
        Name of venv in parentheses in terminal shows that your venv is active.
    
    Creating a Project in Django:

        Tell Django to setup a new project in console:
            django-admin startproject learning_log .
        
        Don't forget the dot at the end,
        it creates our project in a beneficial structure.

        Django has created a new folder (directory) called learning_log containing some py-files and manage.py.
    
    Creating the Database:

        Django stores most information in a database, we create one in console using the manage.py:
            python manage.py migrate

        Modifying a database is called migrating.
        When entering migrate command first time, it creates an SQLite database for us.

    Viewing the Project:

        Using...
            python manage.py runserver
        Django starts a development server, so you can view your project on your system to see how it works.

        You can see if there were any issues and Django will give you the localhost URL as well.

STARTING AN APP:

    Django projects are individual apps that are working together to create a whole.
    For now, we'll use one app to do most of the work.
    When the server is running and we are in the venv, we create a new app in console:
        python manage.py startapp learning_logs
    
    Command "startapp 'appname'" tells Django to create the infrastructure needed to create an app.
    It creates it in a new folder called learning_logs, in this case.

    Defining Models:

        Models are what Django uses to access and manage data. They are in models.py.
        Models are just classes using the Django models module, they tell Django how to work with the data.

        In our case we'll need our user to create a number of topics in their learning log.
        Each entry they make will be tied to a topic and these topics will be displayed as text.
        We'll also need to store the timestamp for each entry, so we can show users when they made each entry.

        Check models.py.
        https://docs.djangoproject.com/en/2.2/ref/models/fields/

    Activating Models:    
        
        To actually use our models, we need to manually tell Django to include them in the overall project.
        In settings.py, in the INSTALLED_APPS list, you'll see which apps are installed and working together.
        Add your apps as items in that list. (See settings.py)

        Next we'll need to tell Django to modify the database so it can store information related to the models.
        Run the following in console:
            python manage.py makemigrations learning_logs

            The makemigrations command tells Django to figure out how to store the data associated
            with our new models in the database.
            Will return something like the following:

                Migrations for 'learning_logs':
                    learning_logs\migrations\0001_initial.py
                        - Create model Topic
            
        It creates an initial migration file, which needs to be applied using the migrate command:
            python manage.py migrate

            If run correctly, it should give this as in the last two lines:
                Running migrations:
                    Applying learning_logs.0001_initial... OK
        
        Whenever we want to modify Learning Log, we follow these THREE STEPS:
            1. Modify models.py
            2. Call makemigrations on learning_logs (the appname)
            3. Run the 'manage.py migrate' command to apply and modify the database
        
    The Django Admin Site:

        The Django admin site lets administrators work with their models more easily.

        Setting Up a Superuser:

            Django lets you set up a superuser, who has all privileges available on the site.
            Run the follwing in console and respond to the prompts to create a superuser:

                python manage.py createsuperuser
                    Username (leave blank to use 'jonat'): drudzi
                    Email address: jonathan.r.axelsson@gmail.com
                    Password: xxxxx
                    Password (again): xxxxx
                    Superuser created successfully.
        
        Registering a Model with the Admin Site:

            The admin site doesn't include all models, our own models need to be added manually.
            To register your own apps to the Django admin site, go to admin.py.
            Reach the admin site through localhost:port/admin
        
        Adding topics:

            Topics will be under Learning_Logs on the admin site.
            We'll add Chess and Rock Climbing as topics to have some data to work with.

    Defining the Entry Model:

        For a user to record what they've been learning about their topics,
        we need to define a model for the kinds of entries users can make in their learning logs.
        Each entry needs to be associated with a certain topic.
        This kind of relationship is called a many-to-one relationship,
        meaning that many entries can be associated with one topic.

        We place the Entry model-class in models.py.

        Next, we'll migrate the Entry class like we did with the Topic class.
        Also register it to the admin site in admin.py.

        To get some more data to work with, we add three entries, two for chess and one for climbing.
    
    The Django Shell:

        The Django Shell is an interactive environment where we can examine our data
        programmatically. This environment is great for testing and troubleshooting your projects.

        python manage.py shell
            This command runs the Django shell.
        
        When entered in a venv it launches a Python interpreter which allows you to 
        explore the data stored in your project's database.

        >>> from learning_logs.models import Topic, Entry
        >>> topics = Topic.objects.all()
            Topic.objects.all() returns a type of list called queryset of all the Topic instances:
            <QuerySet [<Topic: Chess>, <Topic: Rock Climbing>]>
        
        >>> for topic in topics:
        ...   print(topic.id, topic)
        1 Chess
        2 Rock Climbing
            The for loop runs through the topics queryset, the id returns the index/id of the instance.
            We can clearly see that Chess has ID of 1 and Climbing an ID of 2.
        
        If you know the ID of an object, you can use Topic.objects.get(id=x) to examine it:
        >>> topic = Topic.objects.get(id=1)
        >>> topic.text
        'Chess'
        >>> topic.date_added
        datetime.datetime(2019, 2, 19, 1, 55, 31, 98500, tzinfo=<UTC>)

        You can also use ForeignKeys, connections between models.
        In our case, entries are connected to a specific topic.
        >>> topic.entry_set.all()
            Use this formula: model(lowercase).model(lowercase)_set.all()
        
        From the code above, we get a queryset of the entries connected to the topic.

        NOTE:
        Each time you modify your models, you'll need to restart the shell to see the changes.
        Press CTRL-Z and ENTER to exit a shell or exit().

        More on queries and Django shell:
        https://docs.djangoproject.com/en/3.0/topics/db/queries/

MAKING PAGES: The Learning Log Home Page:

    Making web pages with Django consists of three steps:
        Defining URL patterns
        Writing views
        Writing templates
    
        Order doesn't matter but we'll do it in the order above.

    A URL pattern describes the way the URL is laid out.
    It tells Django what to look for when matching a browser request with a site's URL...
    so it knows which page to return.

    Each URL maps to a certain VIEW, which is a function that 
    retrieves and processes the data needed for that page.

    These views often render the page using a TEMPLATE, which contains the overall structure of the page.

    Mapping a URL:

        Users request pages by entering URLs into a browser and clicking links,
        so we need to decide what URLs are needed for our site.

        We include our app-URLs in the main urls.py and then define the apps' URLs in their own urls.py.
        See the comments in urls.py.

    Writing a View:

        A view function takes in information about a request, prepares the data needed to generate
        that page, and then sends the data back to the browser, often by using a template
        that defines what the page will look like.

        We write our index-view-function inside views.py.
        See views.py.
    
    Writing a Template:

        The template defines what the page should look like,
        and Django fills in the relevant data each time the page is requested.Ã¤
        A template allows you to access any data provided by the view.
        Because our view-func for the home page provided no data, this template will be simple.

        We'll set up a templates-folder inside the app-directory (learning_logs).
        Kind of weirdly we will also set up a new folder in templates called learning_logs.
        This might seem a little redundant, but it sets up a beneficial structure for Django.

        After our templates folder is set up, we'll create the actual template file inside
        the inner learning_logs folder and we'll name it index.html.

        It's a very simple file, it looks like this:
            <p>Learning Log</p>

            <p>Learning Log helps you keep track of your learning, for any 
            topic you're learning about.</p>

        It's HTML code. <p></p> signifies paragraphs. <p> opens it and </p> closes it.

        Now, when you run the server and go to the base URL, you'll see this simple page using index.html template.

BUILDING ADDITIONAL PAGES:

    ...

    Template Inheritance:

        ...

        The Parent Template:

            ...
        
        The Child Template:

            ...